> sun
model_path = cube.obj
materials = [light]
render_passes = [forward_nodepth]
spatial_component.position = vec3(0.0, 0.0, 0.0)
spatial_component.rotation = vec4(0.0, 0.0, 1.0, 0.0)
spatial_component.scale = vec3(0.3, 0.3, 0.3)
light_component.type = directional
light_component.direction = vec3(0.70, -0.70, 0.0)
light_component.color = vec4(4.0, 4.0, 4.0, 1.0)
light_component.attenuation = vec4(1.0, 0.0, 0.0, 0.0)

> goose
model_path = miniGoose.fbx
materials = [goose]
render_passes = [deferred]
physics_component.obb.center = vec3(0.0, 3.2, 0.0)
physics_component.obb.x_axis = vec3(1.0, 0.0, 0.0)
physics_component.obb.y_axis = vec3(0.0, 1.0, 0.0)
physics_component.obb.extents = vec3(2.5, 3.2, 2.5)
spatial_component.position = vec3(-10.0, 8.0, 5.0)
spatial_component.rotation = vec4(0.0, 0.0, 1.0, 0.0)
spatial_component.scale = vec3(0.2, 0.2, 0.2)
behavior_component.behavior = char_movement_test

> platform
model_path = platform/platform.obj
materials = [platform]
render_passes = [deferred, shadowcaster]
physics_component.obb.center = vec3(0.0, -3.0, 0.0)
physics_component.obb.x_axis = vec3(1.0, 0.0, 0.0)
physics_component.obb.y_axis = vec3(0.0, 1.0, 0.0)
physics_component.obb.extents = vec3(1.2, 5.0, 1.0)
spatial_component.position = vec3(5.0, 10.0, -5.0)
spatial_component.rotation = vec4(0.0, 0.0, 1.0, 0.0)
spatial_component.scale = vec3(3.0, 3.0, 3.0)
behavior_component.behavior = test

; > island
; model_path = island/island.obj
; materials = [island]
; render_passes = [deferred, shadowcaster]
; spatial_component.position = vec3(0.0, 0.0, 0.0)
; spatial_component.rotation = vec4(0.0, 0.0, 1.0, 0.0)
; spatial_component.scale = vec3(1.0, 1.0, 1.0)

> ocean
builtin_model_name = ocean
materials = [ocean]
render_passes = [forward_depth]
spatial_component.position = vec3(0.0, 0.0, 0.0)
spatial_component.rotation = vec4(0.0, 0.0, 1.0, 0.0)
spatial_component.scale = vec3(1.0, 1.0, 1.0)
